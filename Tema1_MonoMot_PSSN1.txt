#include <LiquidCrystal.h>
 
const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
unsigned short secunde=0, miliSecunde=0, minute=40, ore=15;
unsigned char nrInterrupts=0;
 
volatile float tensiune, temp_c;
volatile int  temp_q;

void adc_init() //initializare CAN
{
  ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)); //Setare factor de divizare recventa ceas intern pentru obtinere frecventa CAN - 128
  ADMUX |= (1<<REFS0); //Referinta interna AVcc
  ADCSRA |= (1<<ADEN); //Activare CAN
  ADCSRA |= (1<<ADSC); //Start conversie CAN
  ADCSRA |= (1<<ADIE);  //Pronim intreruperile ADC
}
 

void acd_lcd_function()
{	
     lcd.setCursor(0,0);
     tensiune=(temp_q*5000.0)/1023.0;
     temp_c=(tensiune-500)/10;
     lcd.print("Temp = ");
     lcd.print(temp_c);
     lcd.print(char(176));
     lcd.print("C"); 
}

void Print0(unsigned short nr){
 if(nr < 10) lcd.print('0');
}

void Afisare_ora(){
   lcd.setCursor(0,1);
   lcd.print("Ora ");
   Print0(ore);
   lcd.print(ore);
   lcd.print(':');
   Print0(minute);
   lcd.print(minute);
   lcd.print(':');
   Print0(secunde);
   lcd.print(secunde);

}

void init_timer1_OCR()
{
  TCCR1A=0;
   TCCR1B|=(1<<CS10) | (1<< CS12); //prescaler 1024
   TIMSK1|=1<<OCIE1A; //Output Compare Interrupt Enable 1A
   OCR1A=15625; // F_CPU / Prescaler -> 1s
}


int main()
{
  lcd.begin(16, 2);
  DDRB|=1<<PB5;
  init_timer1_OCR();
  adc_init();
  Afisare_ora();
  sei();
  while(1){
  }
}


ISR(TIMER1_COMPA_vect){
  PORTB^=1<<PB5;
   ++nrInterrupts;
  if(nrInterrupts == 61){
   ++secunde;
  nrInterrupts = 0;
  if(secunde > 59){
    ++minute;
    secunde = 0;
  }
  if(minute > 59){
   ++ore;
    minute = 0;
  }
  if(ore == 24) 
    ore = 0;
    Afisare_ora();
  }  
  TCNT1=0; //fara CTC
}

ISR(ADC_vect)
{
   temp_q = ADC; // Nr_CAN din senzor de temperatura {0,1.....1023}
   acd_lcd_function();
   ADCSRA|=1<<ADSC; //Start conversie CAN
  
}