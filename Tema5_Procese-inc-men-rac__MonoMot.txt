/*Meniul sistemului va permite modificarea urmÄƒtorilor parametri: TSET,
tincalzire, timp_incalzire
tmentinere,
tracire, 
KP, KI, KD
*/
#include <LiquidCrystal.h>
#define BUTTON_OK 6
#define BUTTON_CANCEL 7
#define BUTTON_PREV 8
#define BUTTON_NEXT 9
#define ROOM_TEMP 20
int sum_error=0;
// input = senzor temperatura LM35
// error = setpoint = input
// output_P = kp * error (PWM 0 -100)
// 1. sum_error += error
// 2. it => sum_error = 10;
// output_PI = kp * error + ki * sum_error; (ki = 0.1)
// prev_error = 10;
// output_PID = kp * error + ki * sum_error + kd * (error - prev_error)

enum Buttons {
  EV_OK,
  EV_CANCEL,
  EV_NEXT,
  EV_PREV,
  EV_NONE,
  EV_MAX_NUM
};

enum Menus {
  MENU_MAIN = 0,
  MENU_tincalzire,
  MENU_tmentinere,
  MENU_tracire,
  MENU_KP,
  MENU_KI,
  MENU_KD,
  MENU_TEMP,
  MENU_MAX_NUM
};

LiquidCrystal lcd(12, 11, 5, 4, 3, 2);
double temp = 50;   //SET_POINT
double moving_sp = ROOM_TEMP;
double kp = 20;
double ki = -0.03;
double kd = 0.2;
float temp_q = 0;
Menus scroll_menu = MENU_MAIN;
Menus current_menu =  MENU_MAIN;

double tincalzire = 60;
double tmentinere = 20;
double tracire = 50;

void state_machine(enum Menus menu, enum Buttons button);
Buttons GetButtons(void);
void print_menu(enum Menus menu);

typedef void (state_machine_handler_t)(void);

void afisare_timp(void)
{
 	int min = 0;
  	int sec = 0;
    int remaining = 0;
  
  	lcd.setCursor(0,1);
  lcd.print("P:");
  lcd.print(moving_sp);
  
  double now = millis();
  int total_seconds = now/1000;
  Serial.println(total_seconds);
  
  if (total_seconds <= tincalzire)
  {
    Serial.print("Inc: ");
    Serial.println(total_seconds);
    moving_sp = ROOM_TEMP + (temp - ROOM_TEMP) * total_seconds/tincalzire;
   	Serial.print("SP:");
    Serial.println(moving_sp);
  }
  else if (total_seconds <= (tincalzire - tmentinere))
           {
             Serial.print("Men:");
             Serial.println(total_seconds);
    		 
           }
  else if (total_seconds <= (tincalzire + tmentinere + tracire))
           {
             lcd.print("Rac:");
             Serial.println(total_seconds);
    		 moving_sp = ROOM_TEMP + (temp - ROOM_TEMP) -(temp - ROOM_TEMP)* (temp - temp * total_seconds/(tincalzire + tmentinere + tracire));
           }
  else
  		   {
             lcd.print("Oprit: "); 
   			 Serial.println(total_seconds);
  		   }        
           
  lcd.print(" t:");
  lcd.print(total_seconds);
  
 /* if (uptime <= tincalzire)
  {
   lcd.print(" TInc: ");
    remaining = tincalzire - uptime;
    moving_sp = temp * (tincalzire - remaining)/tincalzire;
  }
  else if (uptime <= (tincalzire - tmentinere)
  {
   lcd.print(" TMen:");
    remaining = (tincalzire + tmentinere) - uptime;
  }
  else if (uptime <= (tincalzire + tmentinere + tracire))
  {
   lcd.print(" TRac:");
    remaining = (tincalzire + tmentinere + tracire) - uptime;
    moving_sp = temp - tmp * (tracire - remaining)/timp_rac;
  }
  else
  {
   lcd.print("Oprit: "); 
  }
  min = remaining / 60;
  sec = remaining % 60;
  lcd.print(min);
  lcd.print(":");
  lcd.print(sec);
  */
}

void print_menu(enum Menus menu)
{
  lcd.clear();
  switch(menu)
  {
    case MENU_tincalzire:
    	lcd.print("ti = ");
    	lcd.print(tincalzire);
    	break;
    case MENU_tmentinere:
    	lcd.print("tm = ");
    	lcd.print(tmentinere);
    	break;
    case MENU_tracire:
    	lcd.print("tr = ");
    	lcd.print(tracire);
    	break;	
    case MENU_KP:
    	lcd.print("KP = ");
    	lcd.print(kp);
    	break;
    case MENU_KI:
    	lcd.print("KI = ");
    	lcd.print(ki);
    	break;
    case MENU_KD:
    	lcd.print("KD = ");
    	lcd.print(kd);
    	break;
    case MENU_TEMP:
    	lcd.print("TEMP = ");
    	lcd.print(temp);
    	break;
    case MENU_MAIN:
    default:
    	//lcd.print("PS 2020");
    lcd.print("T ");
    lcd.print(analogRead(0)/2 - 50);
    lcd.print(" S ");
    lcd.print(temp);
    afisare_timp();
   	break;
  }
  if(current_menu != MENU_MAIN)
  {
  	lcd.setCursor(0,1);
  	lcd.print("modifica");
  }
}

void enter_menu(void)
{
  current_menu = scroll_menu;
}

void go_home(void)
{
  scroll_menu = MENU_MAIN;
  current_menu = scroll_menu;
}

void go_next(void)
{
  scroll_menu = (Menus) ((int)scroll_menu + 1);
  scroll_menu = (Menus) ((int)scroll_menu % MENU_MAX_NUM);
}

void go_prev(void)
{
  scroll_menu = (Menus) ((int)scroll_menu - 1);
  scroll_menu = (Menus) ((int)scroll_menu % MENU_MAX_NUM);
}

void save_ti(void)
{
}

void save_tm(void)
{
}

void save_tr(void)
{
}

void save_kp(void)
{
}

void save_ki(void)
{
}

void save_kd(void)
{
}

void inc_ti(void)
{
  tincalzire++;
}

void inc_tm(void)
{
  tmentinere++;
}

void inc_tr(void)
{
  tracire++;
}

void inc_kp(void)
{
  kp++;
}

void inc_ki(void)
{
  ki++;
}

void inc_kd(void)
{
  kd++;
}

void dec_ti(void)
{
  tincalzire--;
}

void dec_tm(void)
{
  tmentinere--;
}

void dec_tr(void)
{
  tracire--;
}

void dec_kp(void)
{
  kp--;
}

void dec_ki(void)
{
  ki--;
}

void dec_kd(void)
{
  kd--;
}

void save_temp(void)
{
}

void inc_temp(void)
{
  temp++;
}

void dec_temp(void)
{
  temp--;
}

state_machine_handler_t* sm[MENU_MAX_NUM][EV_MAX_NUM] = 
{ //events: OK , CANCEL , NEXT, PREV
  {enter_menu, go_home, go_next, go_prev},  // MENU_MAIN
  {go_home, go_home, inc_ti, dec_ti},       // MENU_tincalzire
  {go_home, go_home, inc_tm, dec_tm},       // MENU_tmentinere
  {go_home, go_home, inc_tr, dec_tr},       // MENU_tracire
  {go_home, go_home, inc_kp, dec_kp},       // MENU_KP
  {go_home, go_home, inc_ki, dec_ki},       // MENU_Ki
  {go_home, go_home, inc_kd, dec_kd},       // MENU_Kd
  {go_home, go_home, inc_temp, dec_temp},   // MENU_TEMP
};

void state_machine(enum Menus menu, enum Buttons button)
{
  sm[menu][button]();
}

Buttons GetButtons(void)
{
  enum Buttons ret_val = EV_NONE;
  if (digitalRead(BUTTON_OK))
  {
    ret_val = EV_OK;
  }
  else if (digitalRead(BUTTON_CANCEL))
  {
    ret_val = EV_CANCEL;
  }
  else if (digitalRead(BUTTON_NEXT))
  {
    ret_val = EV_NEXT;
  }
  else if (digitalRead(BUTTON_PREV))
  {
    ret_val = EV_PREV;
  }
  Serial.print(ret_val);
  return ret_val;
}

void setup()
{
  Serial.begin(9600);
  lcd.begin(16,2);
  pinMode(6, INPUT);
  digitalWrite(6, LOW); // pull-down
    pinMode(7, INPUT);
  digitalWrite(7, LOW); // pull-down
    pinMode(8, INPUT);
  digitalWrite(8, LOW); // pull-down
    pinMode(9, INPUT);
  digitalWrite(9, LOW); // pull-down
}

void loop()
{
  volatile Buttons event = GetButtons();
  if (event != EV_NONE)
  {
    state_machine(current_menu, event);
  }
  	//uptime = millis() / 1000;
    analogWrite(10, random(255)); // Replce with 'PID'
    print_menu(scroll_menu);
    delay(1000);
}

static int suma_erori;

int PID_Output_Calculate(void)
{
 int TSet =50;          //grade Celsius
 int T_Current = 80;    //grade Celsius
 int eroare;
 int output;
 static int suma_erori = 0;
  
 eroare = TSet - T_Current;
 eroare = -30; //grade Celsius
 suma_erori = suma_erori + eroare;
  
 float Kp = 20;
 float Ki = 0.01;
 output = Kp * eroare * ki * suma_erori;
  //output = -30 *20;
  //output = -600;
  
  if (output > 255)
  {
   	output = 255; 
  }
  else if (output < 0)
  {
    output = 0; 
  }
}